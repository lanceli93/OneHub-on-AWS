AWSTemplateFormatVersion: '2010-09-09'
Description: 'One-API ECS Fargate deployment with Master-Slave architecture'

Parameters:
  ProjectName:
    Type: String
    Default: one-api
    Description: Project name for resource naming
  
  Environment:
    Type: String
    Default: prod
    Description: Environment name
  
  DockerImage:
    Type: String
    Default: ghcr.io/martialbe/one-api
    Description: Docker image for One-API
  
  DatabasePassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Password for RDS Aurora database

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.10.0/24
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.20.0/24
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-private-subnet-2

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-private-routes

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-alb-sg
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-alb-sg

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-ecs-sg
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ecs-sg

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-rds-sg
      GroupDescription: Security group for RDS Aurora
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-rds-sg

  # RDS Aurora Serverless v2
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Aurora database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-db-subnet-group

  AuroraCluster:
    Type: AWS::RDS::DBCluster
    DependsOn: DBSubnetGroup
    Properties:
      DBClusterIdentifier: !Sub ${ProjectName}-aurora-cluster
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.10.0
      DatabaseName: oneapi
      MasterUsername: root
      MasterUserPassword: !Ref DatabasePassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RDSSecurityGroup
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 8
      BackupRetentionPeriod: 7
      DeletionProtection: false
      EnableHttpEndpoint: true

  AuroraInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: AuroraCluster
    Properties:
      DBInstanceIdentifier: !Sub ${ProjectName}-aurora-instance
      DBClusterIdentifier: !Ref AuroraCluster
      DBInstanceClass: db.serverless
      Engine: aurora-mysql

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-alb
      Scheme: internal
      Type: application
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  MasterTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-master-tg
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  SlaveTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-slave-tg
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MasterTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ALB Listener Rule for OpenAI API - Route to Slave nodes
  OpenAIAPIRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref SlaveTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/v1/*"
      ListenerArn: !Ref ALBListener
      Priority: 100

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-cluster
      CapacityProviders:
        - FARGATE

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}
      RetentionInDays: 7

  # Master Task Definition
  MasterTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-master-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: one-api-master
          Image: !Ref DockerImage
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: NODE_TYPE
              Value: master
            - Name: SQL_DSN
              Value: !Sub "root:${DatabasePassword}@tcp(${AuroraCluster.Endpoint.Address}:3306)/oneapi"
            - Name: USER_TOKEN_SECRET
              Value: "a8f7b2c9d4e6f1a3b5c8d2e9f7a4b6c1d8e5f2a9b7c4d1e8f5a2b9c6d3e0f7a4"
            - Name: SESSION_SECRET
              Value: "f3a8b1c6d9e2f5a0b7c4d1e8f5a2b9c6d3e0f7a4b1c8d5e2f9a6b3c0d7e4f1a8"
            - Name: TZ
              Value: Asia/Shanghai
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: master

  # Slave Task Definition
  SlaveTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-slave-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: one-api-slave
          Image: !Ref DockerImage
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: NODE_TYPE
              Value: slave
            - Name: SQL_DSN
              Value: !Sub "root:${DatabasePassword}@tcp(${AuroraCluster.Endpoint.Address}:3306)/oneapi"
            - Name: USER_TOKEN_SECRET
              Value: "a8f7b2c9d4e6f1a3b5c8d2e9f7a4b6c1d8e5f2a9b7c4d1e8f5a2b9c6d3e0f7a4"
            - Name: SESSION_SECRET
              Value: "f3a8b1c6d9e2f5a0b7c4d1e8f5a2b9c6d3e0f7a4b1c8d5e2f9a6b3c0d7e4f1a8"
            - Name: SYNC_FREQUENCY
              Value: "60"
            - Name: MEMORY_CACHE_ENABLED
              Value: "true"
            - Name: TZ
              Value: Asia/Shanghai
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: slave

  # Master ECS Service
  MasterService:
    Type: AWS::ECS::Service
    DependsOn: 
      - ALBListener
      - AuroraInstance
    Properties:
      ServiceName: !Sub ${ProjectName}-master-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref MasterTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: one-api-master
          ContainerPort: 3000
          TargetGroupArn: !Ref MasterTargetGroup

  # Slave ECS Service
  SlaveService:
    Type: AWS::ECS::Service
    DependsOn: 
      - ALBListener
      - AuroraInstance
      - MasterService
    Properties:
      ServiceName: !Sub ${ProjectName}-slave-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref SlaveTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: one-api-slave
          ContainerPort: 3000
          TargetGroupArn: !Ref SlaveTargetGroup
      HealthCheckGracePeriodSeconds: 300

  # Auto Scaling for Slave Service
  SlaveServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: SlaveService
    Properties:
      MaxCapacity: 20
      MinCapacity: 2
      ResourceId: !Sub service/${ECSCluster}/${SlaveService.Name}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  SlaveServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: SlaveServiceScalingTarget
    Properties:
      PolicyName: !Sub ${ProjectName}-slave-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SlaveServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0

  # VPC Origin for CloudFront
  VpcOrigin:
    Type: AWS::CloudFront::VpcOrigin
    Properties:
      VpcOriginEndpointConfig:
        Arn: !GetAtt ApplicationLoadBalancer.LoadBalancerArn
        HTTPPort: 80
        Name: !Sub ${ProjectName}-alb-vpc-origin
        OriginProtocolPolicy: http-only
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpc-origin

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: VpcOrigin
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub ${ProjectName} CloudFront with VPC ALB origin
        Origins:
          - Id: VPCALBOrigin
            DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            VpcOriginConfig:
              VpcOriginId: !GetAtt VpcOrigin.Id
              OriginKeepaliveTimeout: 5
              OriginReadTimeout: 30
        DefaultCacheBehavior:
          TargetOriginId: VPCALBOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
          Compress: true
        IPV6Enabled: true
        PriceClass: PriceClass_100

Outputs:
  CloudFrontDomainName:
    Description: CloudFront distribution domain name (main access point)
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub ${ProjectName}-cloudfront-domain

  ALBDNSName:
    Description: DNS name of the internal Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${ProjectName}-alb-dns

  VpcOriginId:
    Description: VPC Origin ID
    Value: !GetAtt VpcOrigin.Id
    Export:
      Name: !Sub ${ProjectName}-vpc-origin-id

  RDSEndpoint:
    Description: RDS Aurora cluster endpoint
    Value: !GetAtt AuroraCluster.Endpoint.Address
    Export:
      Name: !Sub ${ProjectName}-rds-endpoint

  ECSClusterName:
    Description: Name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${ProjectName}-ecs-cluster

  MasterServiceName:
    Description: Name of the Master ECS service
    Value: !Ref MasterService
    Export:
      Name: !Sub ${ProjectName}-master-service

  SlaveServiceName:
    Description: Name of the Slave ECS service
    Value: !Ref SlaveService
    Export:
      Name: !Sub ${ProjectName}-slave-service

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${ProjectName}-vpc-id
